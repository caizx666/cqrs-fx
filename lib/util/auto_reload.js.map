{"version":3,"sources":["../../src/util/auto_reload.js"],"names":["sys_module","require","_rewriteSysModuleLoad","NODE_MODULES","sep","init","srcPath","callback","autoReload","normalize","prevFilesCount","file","indexOf","mod","cache","children","length","fileItem","item","clearFileCache","files","forEach","filesCount","filter","extname","flag","hasChange","mTime","statSync","mtime","getTime","checkCacheChange","checkFileChange","setTimeout","run","bind","load","_load","request","parent","isMain","exportsObj","filename","_resolveFilename","cachedModule","_cache","push","e"],"mappings":"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","file":"auto_reload.js","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport {getFiles,isFile} from '../utils';\r\n\r\n//can not use import from\r\nlet sys_module = require('module');\r\n\r\n//rewriteSysModuleLoad flag\r\nlet _rewriteSysModuleLoad = false;\r\n\r\nconst NODE_MODULES = `${path.sep}node_modules${path.sep}`;\r\n\r\n/**\r\n * auto reload file\r\n */\r\nexport default class {\r\n  /**\r\n   * constructor\r\n   * @param  {Array} args []\r\n   * @return {}         []\r\n   */\r\n  constructor(...args){\r\n    this.init(...args);\r\n  }\r\n  /**\r\n   * init\r\n   * @param  {String}   srcPath  [source path]\r\n   * @param  {Function} callback [when file has changed, callback will be invoke]\r\n   * @param  {Boolean}  log      [log reload file]\r\n   * @return {}            []\r\n   */\r\n  init(srcPath, callback){\r\n    this.autoReload = {};\r\n    this.srcPath = path.normalize(srcPath);\r\n    this.callback = callback;\r\n    this.prevFilesCount = 0;\r\n  }\r\n  /**\r\n   * log file\r\n   * @param  {String} file []\r\n   * @return {}      []\r\n   */\r\n  // log(file){\r\n  //   //only log app files changed\r\n  //   if(file.indexOf(this.srcPath) === 0){\r\n  //     file = file.slice(this.srcPath.length);\r\n  //     log(`reload file ${file}`, 'RELOAD');\r\n  //   }\r\n  // }\r\n  /**\r\n   * clear file cache, also clear dependents file cache\r\n   * @return {} []\r\n   */\r\n  clearFileCache(file){\r\n    if(file.indexOf(NODE_MODULES) > -1 || file.indexOf(this.srcPath) !== 0){\r\n      return;\r\n    }\r\n    let mod = require.cache[file];\r\n    if(!mod){\r\n      return;\r\n    }\r\n    //log(`reload file ${file.slice(this.srcPath.length)}`, 'RELOAD');\r\n    //remove children\r\n    if(mod && mod.children){\r\n      mod.children.length = 0;\r\n    }\r\n\r\n    // clear module cache which dependents this module\r\n    for(let fileItem in require.cache){\r\n      if(fileItem === file || fileItem.indexOf(NODE_MODULES) > -1){\r\n        continue;\r\n      }\r\n      let item = require.cache[fileItem];\r\n      if(item && item.children && item.children.indexOf(mod) > -1){\r\n        this.clearFileCache(fileItem);\r\n      }\r\n    }\r\n    //remove require cache\r\n    delete require.cache[file];\r\n  }\r\n  /**\r\n   * clear files cache\r\n   * @param  {Array} files []\r\n   * @return {}       []\r\n   */\r\n  clearFilesCache(files){\r\n    files.forEach(file => {\r\n      this.clearFileCache(file);\r\n    });\r\n    if(this.callback){\r\n      this.callback();\r\n    }\r\n  }\r\n  /**\r\n   * check file change\r\n   * compare files count\r\n   * @return {} []\r\n   */\r\n  checkFileChange(){\r\n    let filesCount = getFiles(this.srcPath, true).filter(file => {\r\n      let extname = path.extname(file);\r\n      return extname === '.js';\r\n    }).length;\r\n    let flag = this.prevFilesCount && this.prevFilesCount !== filesCount;\r\n    this.prevFilesCount = filesCount;\r\n    return flag;\r\n  }\r\n  /**\r\n   * check cache change\r\n   * @return {} []\r\n   */\r\n  checkCacheChange(){\r\n    let autoReload = this.autoReload;\r\n    let hasChange = false;\r\n    for(let file in require.cache){\r\n      //ignore file in node_modules path\r\n      if(file.indexOf(NODE_MODULES) > -1){\r\n        continue;\r\n      }\r\n      if(!isFile(file)){\r\n        this.clearFileCache(file);\r\n        continue;\r\n      }\r\n      let mTime = fs.statSync(file).mtime.getTime();\r\n      if(!autoReload[file]){\r\n        autoReload[file] = mTime;\r\n        continue;\r\n      }\r\n      if(mTime > autoReload[file]){\r\n        this.clearFileCache(file);\r\n        autoReload[file] = mTime;\r\n        hasChange = true;\r\n      }\r\n    }\r\n    return hasChange;\r\n  }\r\n  /**\r\n   * run\r\n   * @return {} []\r\n   */\r\n  run(){\r\n    let hasChange = this.checkCacheChange() || this.checkFileChange();\r\n    if(hasChange && this.callback){\r\n      this.callback();\r\n    }\r\n    setTimeout(this.run.bind(this), 200);\r\n  }\r\n  /**\r\n   * rewrite sys module load method\r\n   * @return {} []\r\n   */\r\n  static rewriteSysModuleLoad(){\r\n\r\n    if(_rewriteSysModuleLoad){\r\n      return;\r\n    }\r\n    _rewriteSysModuleLoad = true;\r\n\r\n    let load = sys_module._load;\r\n\r\n    //rewrite Module._load method\r\n    sys_module._load = (request, parent, isMain) => {\r\n      let exportsObj = load(request, parent, isMain);\r\n      if(!parent){\r\n        return exportsObj;\r\n      }\r\n      if(isMain || parent.filename.indexOf(NODE_MODULES) > -1){\r\n        return exportsObj;\r\n      }\r\n      if(request === 'internal/repl' || request === 'repl'){\r\n        return exportsObj;\r\n      }\r\n      try{\r\n        let filename = sys_module._resolveFilename(request, parent);\r\n        let cachedModule = sys_module._cache[filename];\r\n        if(cachedModule && parent.children.indexOf(cachedModule) === -1){\r\n          parent.children.push(cachedModule);\r\n        }\r\n      }catch(e){}\r\n      return exportsObj;\r\n    };\r\n  }\r\n}\r\n"]}