{"version":3,"sources":["../../src/util/watch_compile.js"],"names":["compiledMtime","compiledErrorFiles","allowFileExt","init","srcPath","outPath","options","callback","normalize","file","onlyCopy","filePath","sep","content","readFileSync","saveFilepath","mkdir","dirname","writeFileSync","type","compileByTypeScript","compileByBabel","e","log","colors","red","message","compileError","pPath","relative","ts","require","startTime","Date","now","diagnostics","output","transpileModule","compilerOptions","module","ModuleKind","CommonJS","target","ScriptTarget","ES6","experimentalDecorators","emitDecoratorMetadata","allowSyntheticDefaultImports","sourceMap","fileName","reportDiagnostics","addRange","length","firstDiagnostics","getLineAndCharacterOfPosition","start","line","character","flattenDiagnosticMessageText","messageText","Error","replaceExtName","JSON","parse","sourceMapText","sources","getRelationPath","sourcesContent","sourceRoot","outputText","logged","orginSourceMap","relativePath","babel","data","transform","filename","presets","concat","plugins","sourceMaps","sourceFileName","basename","prefix","code","indexOf","map","mergeSourceMap","undefined","SourceMapGenerator","SourceMapConsumer","replace","generator","fromSourceMap","applySourceMap","toString","srcFiles","appFiles","srcFilesWithoutExt","item","filter","extname","fileWithoutExt","filepath","unlinkSync","once","files","changedFiles","getSrcDeletedFiles","forEach","compileFile","mTime","statSync","mtime","getTime","outFile","outmTime","ret","push","index","splice","setTimeout","compile","bind","instance"],"mappings":"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","file":"watch_compile.js","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport {getFiles,isFile} from '../utils';\r\n\r\n/**\r\n * watch compile\r\n */\r\nexport default class {\r\n  /**\r\n   * store compiled files last mtime\r\n   * @type {Object}\r\n   */\r\n  compiledMtime = {};\r\n  /**\r\n   * compiled error files\r\n   * @type {Array}\r\n   */\r\n  compiledErrorFiles = [];\r\n  /**\r\n   * allow file ext in src path\r\n   * @type {Array}\r\n   */\r\n  allowFileExt = ['.js', '.ts'];\r\n  /**\r\n   * constructor\r\n   * @param  {Array} args []\r\n   * @return {}         []\r\n   */\r\n  constructor(...args){\r\n    this.init(...args);\r\n  }\r\n  /**\r\n   * init\r\n   * @param  {String} srcPath []\r\n   * @param  {String} outPath []\r\n   * @param  {Boolean} log     []\r\n   * @return {}         []\r\n   */\r\n  init(srcPath, outPath, options = {}, callback){\r\n    this.srcPath = path.normalize(srcPath);\r\n    this.outPath = path.normalize(outPath);\r\n    this.options = options;\r\n    this.callback = callback;\r\n  }\r\n  /**\r\n   * compile single file\r\n   * @param  {String} file     []\r\n   * @param  {Boolean} onlyCopy []\r\n   * @return {}          []\r\n   */\r\n  compileFile(file, onlyCopy){\r\n    let filePath = `${this.srcPath}${path.sep}${file}`;\r\n    let content = fs.readFileSync(filePath, 'utf8');\r\n\r\n    //when get file content empty, maybe file is locked\r\n    if(!content){\r\n      return;\r\n    }\r\n    // only copy file content\r\n    if(onlyCopy){\r\n      let saveFilepath = `${this.outPath}${path.sep}${file}`;\r\n      fs.mkdir(path.dirname(saveFilepath));\r\n      fs.writeFileSync(saveFilepath, content);\r\n      return;\r\n    }\r\n\r\n    try{\r\n      if(this.options.type === 'ts'){\r\n        this.compileByTypeScript(content, file);\r\n      }else{\r\n        this.compileByBabel(content, file);\r\n      }\r\n      return true;\r\n    }catch(e){\r\n\r\n      log(colors => {\r\n        return colors.red(`compile file ${file} error`);\r\n      }, 'COMPILE');\r\n      log(e);\r\n\r\n      e.message = 'Compile Error: ' + e.message;\r\n      this.compileError = e;\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * get relative path\r\n   * @param  {String} file []\r\n   * @return {String}      []\r\n   */\r\n  getRelationPath(file){\r\n    //use dirname to resolve file path in source-map-support\r\n    //so must use dirname in here\r\n    let pPath = path.dirname(this.outPath + path.sep + file);\r\n    return path.relative(pPath, this.srcPath + path.sep + file);\r\n  }\r\n  /**\r\n   * typescript compile\r\n   * @return {} []\r\n   */\r\n  compileByTypeScript(content, file){\r\n    let ts = require('typescript');\r\n    let startTime = Date.now();\r\n    let diagnostics = [];\r\n    let output = ts.transpileModule(content, {\r\n      compilerOptions: {\r\n        module: ts.ModuleKind.CommonJS,\r\n        target: ts.ScriptTarget.ES6,\r\n        experimentalDecorators: true,\r\n        emitDecoratorMetadata: true,\r\n        allowSyntheticDefaultImports: true,\r\n        sourceMap: true\r\n      },\r\n      fileName: file,\r\n      reportDiagnostics: !!diagnostics\r\n    });\r\n    ts.addRange(diagnostics, output.diagnostics);\r\n\r\n    //has error\r\n    if(diagnostics.length){\r\n      let firstDiagnostics = diagnostics[0];\r\n      let {line, character} = firstDiagnostics.file.getLineAndCharacterOfPosition(firstDiagnostics.start);\r\n      let message = ts.flattenDiagnosticMessageText(firstDiagnostics.messageText, '\\n');\r\n      throw new Error(`${message} on Line ${line + 1}, Character ${character}`);\r\n    }\r\n    if(this.options.log){\r\n      log(`Compile file ${file}`, 'TypeScript', startTime);\r\n    }\r\n\r\n    file = this.replaceExtName(file, '.js');\r\n    let sourceMap = JSON.parse(output.sourceMapText);\r\n    sourceMap.sources[0] = this.getRelationPath(file);\r\n    sourceMap.sourcesContent = [content];\r\n    //file value must be equal sources values\r\n    sourceMap.file = sourceMap.sources[0];\r\n    delete sourceMap.sourceRoot;\r\n    this.compileByBabel(output.outputText, file, true, sourceMap);\r\n  }\r\n  /**\r\n   * babel compile\r\n   * @return {} []\r\n   */\r\n  compileByBabel(content, file, logged, orginSourceMap){\r\n    let startTime = Date.now();\r\n    let relativePath = this.getRelationPath(file);\r\n    //babel not export default property\r\n    //so can not use `import babel from 'babel-core'`\r\n    let babel = require('babel-core');\r\n    let data = babel.transform(content, {\r\n      filename: file,\r\n      presets: ['es2015-loose', 'stage-1'].concat(this.options.presets || []),\r\n      plugins: ['transform-runtime'].concat(this.options.plugins || []),\r\n      sourceMaps: true,\r\n      sourceFileName: relativePath\r\n    });\r\n    if(!logged && this.options.log){\r\n      log(`Compile file ${file}`, 'Babel', startTime);\r\n    }\r\n    fs.mkdir(path.dirname(`${this.outPath}${path.sep}${file}`));\r\n    let basename = path.basename(file);\r\n    let prefix = '//# sourceMappingURL=';\r\n    if(data.code.indexOf(prefix) === -1){\r\n      data.code = data.code + '\\n' + prefix + basename + '.map';\r\n    }\r\n    fs.writeFileSync(`${this.outPath}${path.sep}${file}`, data.code);\r\n    let sourceMap = data.map;\r\n    //file value must be equal sources values\r\n    sourceMap.file = sourceMap.sources[0];\r\n    if(orginSourceMap){\r\n      sourceMap = this.mergeSourceMap(orginSourceMap, sourceMap);\r\n    }\r\n    fs.writeFileSync(`${this.outPath}${path.sep}${file}.map`, JSON.stringify(sourceMap, undefined, 4));\r\n  }\r\n  /**\r\n   * merge source map\r\n   * @param  {String} content        []\r\n   * @param  {Object} orginSourceMap []\r\n   * @param  {Object} sourceMap      []\r\n   * @return {}                []\r\n   */\r\n  mergeSourceMap(orginSourceMap, sourceMap){\r\n    let {SourceMapGenerator, SourceMapConsumer} = require('source-map');\r\n    sourceMap.file = sourceMap.file.replace(/\\\\/g, '/');\r\n    sourceMap.sources = sourceMap.sources.map(filePath => {\r\n      return filePath.replace(/\\\\/g, '/');\r\n    });\r\n    var generator = SourceMapGenerator.fromSourceMap(new SourceMapConsumer(sourceMap));\r\n    generator.applySourceMap(new SourceMapConsumer(orginSourceMap));\r\n    sourceMap = JSON.parse(generator.toString());\r\n\r\n    return sourceMap;\r\n  }\r\n  /**\r\n   * src file is deleted, but app file also exist\r\n   * then delete app file\r\n   * @return {} []\r\n   */\r\n  getSrcDeletedFiles(srcFiles, appFiles){\r\n    let srcFilesWithoutExt = srcFiles.map(item => {\r\n      return this.replaceExtName(item);\r\n    });\r\n    return appFiles.filter(file => {\r\n      let extname = path.extname(file);\r\n      if(this.allowFileExt.indexOf(extname) === -1){\r\n        return;\r\n      }\r\n      let fileWithoutExt = this.replaceExtName(file);\r\n      //src file not exist\r\n      if(srcFilesWithoutExt.indexOf(fileWithoutExt) === -1){\r\n        let filepath = this.outPath + path.sep + file;\r\n        if(isFile(filepath)){\r\n          fs.unlinkSync(filepath);\r\n        }\r\n        return true;\r\n      }\r\n    }).map(file => {\r\n      return this.outPath + path.sep + file;\r\n    });\r\n  }\r\n  /**\r\n   * replace filepath extname\r\n   * @param  {String} filepath []\r\n   * @param  {String} extname  []\r\n   * @return {String}          []\r\n   */\r\n  replaceExtName(filepath, extname = ''){\r\n    return filepath.replace(/\\.\\w+$/, extname);\r\n  }\r\n  /**\r\n   * compile\r\n   * @return {} []\r\n   */\r\n  compile(once){\r\n    let files = getFiles(this.srcPath, true);\r\n    let appFiles = getFiles(this.outPath, true);\r\n    let changedFiles = this.getSrcDeletedFiles(files, appFiles);\r\n\r\n    if(this.compileError && !this.compiledErrorFiles.length){\r\n      this.compileError = null;\r\n    }\r\n\r\n    files.forEach(file => {\r\n      let extname = path.extname(file);\r\n      //if is not js file, only copy\r\n      if(this.allowFileExt.indexOf(extname) === -1){\r\n        this.compileFile(file, true);\r\n        return;\r\n      }\r\n      let mTime = fs.statSync(`${this.srcPath}${path.sep}${file}`).mtime.getTime();\r\n      let outFile = `${this.outPath}${path.sep}${file}`;\r\n\r\n      //change extname to .js.\r\n      //in typescript, file extname is .ts\r\n      outFile = this.replaceExtName(outFile, '.js');\r\n\r\n      if(isFile(outFile)){\r\n        let outmTime = fs.statSync(outFile).mtime.getTime();\r\n        //if compiled file mtime is after than source file, return\r\n        if(outmTime >= mTime){\r\n          return;\r\n        }\r\n      }\r\n      if(!this.compiledMtime[file] || mTime > this.compiledMtime[file]){\r\n        let ret = this.compileFile(file);\r\n        if(ret){\r\n          changedFiles.push(outFile);\r\n        }\r\n\r\n        this.compiledMtime[file] = mTime;\r\n\r\n        let index = this.compiledErrorFiles.indexOf(file);\r\n        if(ret){\r\n          if(index > -1){\r\n            this.compiledErrorFiles.splice(index, 1);\r\n          }\r\n        }else if(ret === false){\r\n          if(index === -1){\r\n            this.compiledErrorFiles.push(file);\r\n          }\r\n        }\r\n      }\r\n    });\r\n    //notify auto reload service to clear file cache\r\n    if(changedFiles.length && this.callback){\r\n      this.callback(changedFiles);\r\n    }\r\n    if(!once){\r\n      setTimeout(this.compile.bind(this), 100);\r\n    }\r\n  }\r\n  /**\r\n   * run\r\n   * @return {} []\r\n   */\r\n  run(){\r\n    this.compile();\r\n  }\r\n  /**\r\n   * compile\r\n   * @return {} []\r\n   */\r\n  static compile(srcPath, outPath, options = {}){\r\n    let instance = new this(srcPath, outPath, options);\r\n    instance.compile(true);\r\n  }\r\n}\r\n"]}