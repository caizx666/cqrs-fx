{"version":3,"sources":["../../src/snapshot/mysql_storage.js"],"names":["_tableName","get","table","_actionList","db","pool","spec","resolve","reject","query","err","result","dto","push","action","data","list","slice","count","length","checkCommit","connection","rollback","release","commit","log","s","i","l","splice","getConnection","beginTransaction","forEach","item","version","branch","timestamp","id","aggregateRootType","aggregateRootID","clear"],"mappings":"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","file":"mysql_storage.js","sourcesContent":["import config from '../config';\r\nimport {\r\n  expr\r\n} from '../utils';\r\nimport mysql from '../storage/mysql';\r\n\r\nexport default class {\r\n  constructor() {\r\n    this._tableName = config.get('snapshot').table;\r\n    this._actionList = [];\r\n    this.db = mysql.pool;\r\n  }\r\n\r\n  count(spec) {\r\n    return new Promise(function (resolve, reject) {\r\n      this.db.query('select count(*) from ?? where ??', [this._tableName, expr(spec)], function (err, result) {\r\n        if (err) reject(err);\r\n        resolve(result[0][0]);\r\n      });\r\n    });\r\n  }\r\n\r\n  first(spec) {\r\n    return new Promise(function (resolve, reject) {\r\n      this.db.query('select id,aggregate_root_type,aggregate_root_id,data,version,branch,timestamp from ?? where ?? order by version asc ', [this._tableName, expr(spec)], function (err, ...result) {\r\n        if (err) reject(err);\r\n        resolve(result);\r\n      });\r\n    });\r\n  }\r\n\r\n  inert(dto) {\r\n    this._actionList.push({\r\n      action: 0,\r\n      data: dto\r\n    });\r\n  }\r\n\r\n  update(dto, spec) {\r\n    this._actionList.push({\r\n      action: 1,\r\n      data: dto,\r\n      spec\r\n    });\r\n  }\r\n\r\n  commit() {\r\n    let list = this._actionList.slice(0);\r\n    let count = list.length;\r\n    let checkCommit = (connection, resolve, reject) => {\r\n      if (err) {\r\n        return connection.rollback(function () {\r\n          connection.release();\r\n          reject(err);\r\n        });\r\n      }\r\n      count--;\r\n      if (count === 0) {\r\n        connection.commit(function (err) {\r\n          connection.release();\r\n          if (err) reject(err);\r\n          log('保存快照完成');\r\n\r\n          let s = 0;\r\n          for (let i = 0, l = this._actionList.length; i < l; i++) {\r\n            if (this._actionList[i] == list[0]) {\r\n              s = i;\r\n              break;\r\n            }\r\n          }\r\n          this._actionList.splice(i, list.length);\r\n          resolve();\r\n        });\r\n      }\r\n    };\r\n    return new Promise(function (resolve, reject) {\r\n      if (count <= 0) {\r\n        resolve();\r\n        return;\r\n      }\r\n      this.db.getConnection(function (err, connection) {\r\n        connection.beginTransaction(function (err) {\r\n          if (err) reject(err);\r\n          list.forEach(function (item) {\r\n            if (item.action == 1) {\r\n              connection.query('update ?? data,version,branch,timestamp values (?,?,?,?) where ??', [this._tableName, spec.data, spec.version, spec.branch, spec.timestamp, expr(item.spec)], function (err) {\r\n                checkCommit(connection, resolve, reject);\r\n              });\r\n            }\r\n            if (item.action === 0) {\r\n              connection.query('inert into ?? (id,aggregate_root_type,aggregate_root_id,data,version,branch,timestamp) values (?,?,?,?,?,?,?)', [this._tableName, spec.id, spec.aggregateRootType, spec.aggregateRootID,\r\n                spec.data, spec.version, spec.branch, spec.timestamp\r\n              ], function (err) {\r\n                checkCommit(connection, resolve, reject);\r\n              });\r\n            }\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  rollback() {\r\n    this._actionList.clear();\r\n  }\r\n}\r\n"]}