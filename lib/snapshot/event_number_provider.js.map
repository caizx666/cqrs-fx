{"version":3,"sources":["../../src/snapshot/event_number_provider.js"],"names":["snapshotConfig","get","snapshotStorage","require","storage","code","configFailed","msg","option","numOfEvents","numberOfEvents","eventStorage","_snapshotMapping","name","id","key","keys","indexOf","count","aggregate_root_type","aggregate_root_id","snapshotRecordCnt","first","dataObj","snapshot","Object","assgin","JSON","parse","data","aggregateRootID","branch","version","timestamp","set","aggregateRoot","prototype","__type","hasSnapshot","getSnapshot","aggregateRootType","eventCnt","createSnapshot","__name","update","v1","insert","commit","rollback"],"mappings":"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","file":"event_number_provider.js","sourcesContent":["import config from '../config';\r\nimport err from '../err';\r\nimport eventStorage from '../event/domain_event_storage';\r\nimport uuid from 'node-uuid';\r\n\r\nexport default class {\r\n  constructor() {\r\n    let snapshotConfig = config.get('snapshot');\r\n    let snapshotStorage = require(`./${snapshotConfig.storage}_storage`);\r\n    if (!snapshotStorage)\r\n      throw {\r\n        code: err.configFailed,\r\n        msg: '快照数据存储服务未正确配置，可以在config/snapshot.js中指定'\r\n      };\r\n\r\n    this.option = snapshotConfig.option;\r\n    this.numOfEvents = snapshotConfig.numberOfEvents;\r\n\r\n    this.snapshotStorage = snapshotStorage;\r\n    this.eventStorage = eventStorage;\r\n\r\n    this._snapshotMapping = new Map();\r\n  }\r\n\r\n  async hasSnapshot(name, id) {\r\n    if (!name || !id) return false;\r\n    var key = name + '/' + id;\r\n    if (this._snapshotMapping.keys().indexOf(key) > -1)\r\n      return true;\r\n    let snapshotRecordCnt = await this.snapshotStorage.count({\r\n      aggregate_root_type: name,\r\n      aggregate_root_id: id\r\n    });\r\n    if (snapshotRecordCnt > 0)\r\n      return true;\r\n    else\r\n      return false;\r\n  }\r\n\r\n  async getSnapshot(name, id) {\r\n    if (!name || !id) return null;\r\n    var key = name + '/' + id;\r\n    if (this._snapshotMapping.keys().indexOf(key) > -1)\r\n      return this._snapshotMapping[key];\r\n    let dataObj = await this.snapshotStorage.first({\r\n      aggregate_root_type: name,\r\n      aggregate_root_id: id\r\n    });\r\n    if (dataObj == null)\r\n      return null;\r\n    let snapshot = Object.assgin(JSON.parse(dataObj.data), {\r\n      id: dataObj.aggregateRootID,\r\n      branch: dataObj.branch,\r\n      version: dataObj.version,\r\n      timestamp: dataObj.timestamp\r\n    });\r\n    this._snapshotMapping.set(key, snapshot);\r\n    return snapshot;\r\n  }\r\n\r\n  async canCreateOrUpdateSnapshot(aggregateRoot) {\r\n    if (!aggregateRoot || !aggregateRoot.prototype.__type || !aggregateRoot.id) return false;\r\n    if (await this.hasSnapshot(aggregateRoot.prototype.__type, aggregateRoot.id)) {\r\n      let snapshot = await this.getSnapshot(aggregateRoot.prototype.__type, aggregateRoot.id);\r\n      return snapshot.version + this.numOfEvents <= aggregateRoot.version;\r\n    } else {\r\n      let aggregateRootType = aggregateRoot.prototype.__type;\r\n      let aggregateRootID = aggregateRoot.id;\r\n      let version = aggregateRoot.version;\r\n      let eventCnt = await this.eventStorage.count({\r\n        aggregate_root_type: aggregateRootType,\r\n        aggregate_root_id: aggregateRootID,\r\n        version: ['<=', version]\r\n      });\r\n      return eventCnt >= this.numOfEvents;\r\n    }\r\n  }\r\n\r\n  async createOrUpdateSnapshot(aggregateRoot) {\r\n    if (!aggregateRoot || !aggregateRoot.prototype.__type || !aggregateRoot.id) return;\r\n    let snapshot = aggregateRoot.createSnapshot();\r\n    let dataObj = {\r\n      aggregateRootID: aggregateRoot.id,\r\n      aggregateRootType: aggregateRoot.prototype.__name,\r\n      data: JSON.stringify(snapshot),\r\n      version: aggregateRoot.version,\r\n      branch: aggregateRoot.branch,\r\n      timestamp: aggregateRoot.timestamp\r\n    };\r\n    let key = aggregateRoot.prototype.__type + '/' + aggregateRoot.id;\r\n    if (await this.hasSnapshot(aggregateRoot.prototype.__type, aggregateRoot.id)) {\r\n      let aggregateRootType = aggregateRoot.prototype.__type;\r\n      let aggregateRootID = aggregateRoot.id;\r\n      await this.snapshotStorage.update(dataObj, {\r\n        aggregate_root_type: aggregateRootType,\r\n        aggregate_root_id: aggregateRootID\r\n      });\r\n      this._snapshotMapping.set(key, snapshot);\r\n    } else {\r\n      dataObj.id = uuid.v1();\r\n      await this.snapshotStorage.insert(dataObj);\r\n      this._snapshotMapping.set(key, snapshot);\r\n    }\r\n  }\r\n\r\n  async commit() {\r\n    await this.snapshotStorage.commit();\r\n  }\r\n\r\n  async rollback() {\r\n    await this.snapshotStorage.rollback();\r\n  }\r\n}\r\n"]}