{"version":3,"sources":["../src/core.js"],"names":["alias","_require","fxData","export","type","paths","forEach","files","path","file","slice","name","replace","_loadRequire","filepath","obj","_safeRequire","prototype","__type","__filename","flag","Cls","require","resolve"],"mappings":";;;;;;QAgBgBA,K,GAAAA,K;QAsCAC,Q,GAAAA,Q;;AAtDhB;;AAWO,IAAMC,0BAAS;AACpBF,SAAO,EADa;AAEpBG,UAAQ;AAFY,CAAf;;AAKA,SAASH,KAAT,CAAeI,IAAf,EAAqBC,KAArB,EAA4B;AACjC,MAAI,CAACD,IAAL,EAAW;AACT,WAAOF,OAAOF,KAAd;AACD;AACD;AACA,MAAI,qBAASK,KAAT,KAAmB,uBAAWA,KAAX,CAAvB,EAA0C;AACxCH,WAAOF,KAAP,CAAaI,IAAb,IAAqBC,KAArB;AACA;AACD;AACD;AACA,MAAI,CAAC,oBAAQA,KAAR,CAAL,EAAqB;AACnBA,YAAQ,CAACA,KAAD,CAAR;AACD;AACDA,QAAMC,OAAN,CAAc,gBAAQ;AACpB,QAAIC,QAAQ,qBAASC,IAAT,CAAZ;AACAD,UAAMD,OAAN,CAAc,gBAAQ;AACpB,UAAIG,KAAKC,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAAnB,IAA4BD,KAAK,CAAL,MAAY,GAA5C,EAAiD;AAC/C;AACD;AACD,UAAIE,OAAOF,KAAKC,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,EAAkBE,OAAlB,CAA0B,KAA1B,EAAiC,GAAjC,CAAX,CAJoB,CAI8B;AAClDD,aAAOP,OAAO,GAAP,GAAaO,IAApB;AACAT,aAAOF,KAAP,CAAaW,IAAb,SAAwBH,IAAxB,gBAAqCC,IAArC;AACD,KAPD;AAQD,GAVD;AAWD;;AAED,IAAII,eAAe,SAAfA,YAAe,CAACF,IAAD,EAAOG,QAAP,EAAoB;AACrC,MAAIC,MAAMC,aAAaF,QAAb,CAAV;AACA,MAAI,uBAAWC,GAAX,CAAJ,EAAqB;AACnBA,QAAIE,SAAJ,CAAcC,MAAd,GAAuBP,IAAvB;AACAI,QAAIE,SAAJ,CAAcE,UAAd,GAA2BL,QAA3B;AACD;AACD,MAAIC,GAAJ,EAAS;AACPb,WAAOC,MAAP,CAAcQ,IAAd,IAAsBI,GAAtB;AACD;AACD,SAAOA,GAAP;AACD,CAVD;;AAYO,SAASd,QAAT,CAAkBU,IAAlB,EAAwBS,IAAxB,EAA8B;AACnC,MAAI,CAAC,qBAAST,IAAT,CAAL,EAAqB;AACnB,WAAOA,IAAP;AACD;AACD;AACA,MAAIU,MAAMnB,OAAOC,MAAP,CAAcQ,IAAd,CAAV;AACA,MAAIU,GAAJ,EAAS;AACP,WAAOA,GAAP;AACD;;AAED,MAAIP,WAAWZ,OAAOF,KAAP,CAAaW,IAAb,CAAf;AACA;AACA,MAAI,qBAASG,QAAT,CAAJ,EAAwB;AACtBZ,WAAOC,MAAP,CAAcQ,IAAd,IAAsBG,QAAtB;AACA,WAAOA,QAAP;AACD;AACD;AACA,MAAI,uBAAWA,QAAX,CAAJ,EAA0B;AACxB,QAAIC,MAAMD,UAAV;AACA,QAAIC,GAAJ,EAAS;AACPb,aAAOC,MAAP,CAAcQ,IAAd,IAAsBI,GAAtB;AACD;AACD,WAAOA,GAAP;AACD;AACD;AACA,MAAI,qBAASD,QAAT,CAAJ,EAAwB;AACtB,WAAOD,aAAaF,IAAb,EAAmB,sBAAUG,QAAV,CAAnB,CAAP;AACD;AACD;AACA,MAAIM,IAAJ,EAAU;AACR,WAAO,IAAP;AACD;AACDN,aAAWQ,QAAQC,OAAR,CAAgBZ,IAAhB,CAAX;AACA,SAAOE,aAAaF,IAAb,EAAmBG,QAAnB,CAAP;AACD","file":"core.js","sourcesContent":["import {\r\n  safeRequire,\r\n  isArray,\r\n  isString,\r\n  isFunction,\r\n  isObject,\r\n  getFiles,\r\n  sep,\r\n  normalize\r\n} from './utils';\r\n\r\nexport const fxData = {\r\n  alias: {},\r\n  export: {}\r\n};\r\n\r\nexport function alias(type, paths) {\r\n  if (!type) {\r\n    return fxData.alias;\r\n  }\r\n  // 支持对象和回调动态创建，支持动态对象\r\n  if (isObject(paths) || isFunction(paths)) {\r\n    fxData.alias[type] = paths;\r\n    return;\r\n  }\r\n  //regist alias\r\n  if (!isArray(paths)) {\r\n    paths = [paths];\r\n  }\r\n  paths.forEach(path => {\r\n    let files = getFiles(path);\r\n    files.forEach(file => {\r\n      if (file.slice(-3) !== '.js' || file[0] === '_') {\r\n        return;\r\n      }\r\n      let name = file.slice(0, -3).replace(/\\\\/g, '/'); //replace \\\\ to / on windows\r\n      name = type + '/' + name;\r\n      fxData.alias[name] = `${path}${sep}${file}`;\r\n    });\r\n  });\r\n}\r\n\r\nlet _loadRequire = (name, filepath) => {\r\n  let obj = _safeRequire(filepath);\r\n  if (isFunction(obj)) {\r\n    obj.prototype.__type = name;\r\n    obj.prototype.__filename = filepath;\r\n  }\r\n  if (obj) {\r\n    fxData.export[name] = obj;\r\n  }\r\n  return obj;\r\n};\r\n\r\nexport function _require(name, flag) {\r\n  if (!isString(name)) {\r\n    return name;\r\n  }\r\n  // adapter or middle by register\r\n  let Cls = fxData.export[name];\r\n  if (Cls) {\r\n    return Cls;\r\n  }\r\n\r\n  let filepath = fxData.alias[name];\r\n  // 支持对象\r\n  if (isObject(filepath)) {\r\n    fxData.export[name] = filepath;\r\n    return filepath;\r\n  }\r\n  // 支持回调函数创建\r\n  if (isFunction(filepath)) {\r\n    let obj = filepath();\r\n    if (obj) {\r\n      fxData.export[name] = obj;\r\n    }\r\n    return obj;\r\n  }\r\n  // 默认从文件加载\r\n  if (isString(filepath)) {\r\n    return _loadRequire(name, normalize(filepath));\r\n  }\r\n  // only check in alias\r\n  if (flag) {\r\n    return null;\r\n  }\r\n  filepath = require.resolve(name);\r\n  return _loadRequire(name, filepath);\r\n}\r\n"]}