{"version":3,"sources":["../src/app.js"],"names":["options","loader","init","_modules","_loader","_types","_dirname","command","config","event","domain","name","dir","join","appPath","dirs","length","isModule","indexOf","loadSubModule","push","itemType","forEach","module","replace","moduleType","filepath","loadExts","modules","alias","args","Error","compileCallback","instance","getReloadInstance","run","srcPath","clearData","load","outPath","reloadInstance","clearFilesCache","changedFiles","console","log","export","checkEnv","loadModule","loadCQRS","startTime","Date","now","preload","autoReload"],"mappings":"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","file":"app.js","sourcesContent":["import path from 'path';\r\n\r\nimport config from './config';\r\nimport {\r\n  fxData,\r\n  alias,\r\n  _require\r\n} from './core';\r\nimport {register} from './register';\r\nimport {\r\n  safeRequire,\r\n  log,\r\n  isDir,\r\n  isFile,\r\n  sep,\r\n  exists,\r\n  getDirs,\r\n  getFiles,\r\n  isString,\r\n  isFunction,\r\n  merge\r\n} from './utils';\r\nimport WatchCompile from './util/watch_compile';\r\nimport AutoReload from './util/auto_reload';\r\n\r\nexport default class {\r\n  constructor(options, loader) {\r\n    config.init(options || {});\r\n    this._modules = [];\r\n    this._loader = loader;\r\n    this._types = ['command', 'domain', 'event', 'config'];\r\n    this._dirname = {\r\n      command: 'command',\r\n      config: 'config',\r\n      event: 'event',\r\n      domain: 'domain',\r\n    };\r\n  }\r\n\r\n  loadSubModule(name) {\r\n    let dir = path.join(config.appPath, name);\r\n    if (isDir(dir)) {\r\n      var dirs = getDirs(dir);\r\n      if (dirs.length <= 0) return; // 空模块\r\n      let isModule = false;\r\n      for (let name of dirs) {\r\n        if (this._types.indexOf(name) > -1) {\r\n          isModule = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!isModule) {\r\n        for (let dir of dirs) {\r\n          this.loadSubModule(path.join(name, dir));\r\n        }\r\n      } else {\r\n        this._modules.push(name);\r\n      }\r\n    }\r\n  }\r\n\r\n  loadModule() {\r\n    this._modules = [];\r\n    this.loadSubModule('');\r\n  }\r\n\r\n  // 加载cqrs\r\n  loadCQRS() {\r\n    for (let itemType of this._types) {\r\n      this._modules.forEach(module => {\r\n        let name = module.replace(/\\\\/g, '/');\r\n        let moduleType = name + '/' + itemType;\r\n        let filepath = `${config.appPath}${sep}${module}${sep}${this._dirname[itemType]}`;\r\n        alias(moduleType, filepath);\r\n      });\r\n      // 支持加载扩展对象定义\r\n      this.loadExts({\r\n        itemType,\r\n        modules: this._modules,\r\n        alias\r\n      });\r\n    }\r\n  }\r\n\r\n  loadExts(args) {\r\n    if (isFunction(this._loader)) {\r\n      this._loader(args);\r\n    }\r\n  }\r\n\r\n  checkEnv() {\r\n    if (!exists(config.appPath)) {\r\n      throw Error(`appPath \"${config.appPath || ''}\" not found.`);\r\n    }\r\n  }\r\n\r\n  autoReload() {\r\n    //it auto reload by watch compile\r\n    if (this.compileCallback) {\r\n      return;\r\n    }\r\n    let instance = this.getReloadInstance();\r\n    instance.run();\r\n  }\r\n\r\n  getReloadInstance(srcPath) {\r\n    srcPath = srcPath || config.appPath;\r\n    let instance = new AutoReload(srcPath, () => {\r\n      this.clearData();\r\n      this.load();\r\n    });\r\n    return instance;\r\n  }\r\n\r\n  compile(srcPath, outPath, options = {}) {\r\n    srcPath = srcPath || `${config.appPath}${sep}..${sep}src`;\r\n    outPath = outPath || config.appPath;\r\n    if (isDir(srcPath)) {\r\n      let reloadInstance = this.getReloadInstance(outPath);\r\n      this.compileCallback = changedFiles => {\r\n        reloadInstance.clearFilesCache(changedFiles);\r\n      };\r\n      let instance = new WatchCompile(srcPath, outPath, options, this.compileCallback);\r\n      instance.run();\r\n      console.log(`watch ${srcPath} for compile...`);\r\n    }\r\n  }\r\n\r\n  clearData() {\r\n    if (this._modules) {\r\n      fxData.alias = {};\r\n      fxData.export = {};\r\n    }\r\n  }\r\n\r\n  load() {\r\n    this.checkEnv();\r\n    this.loadModule();\r\n    this.loadCQRS();\r\n    register();\r\n  }\r\n\r\n  preload() {\r\n    let startTime = Date.now();\r\n    for (let name in fxData.alias) {\r\n      _require(name);\r\n    }\r\n    log('cqrs preload packages finished', 'PRELOAD', startTime);\r\n  }\r\n\r\n  run(preload) {\r\n    this.load();\r\n    this.autoReload();\r\n    if (preload) {\r\n      this.preload();\r\n    }\r\n  }\r\n}\r\n"]}